
#include "include/Passageiro.h"
#include "include/Carro.h"
#include "include/Parque.h"
#include <atomic>
#include <iostream>
#include <mutex>
#include <random>
#include <thread>
#define MAX_NUM_VOLTAS 2
    atomic_int turn[9];
    atomic_int numIngressos;
    int numero;
    mutex Mutex;
Passageiro::Passageiro(int id, Carro *c) {
	this->id = id;
	this->carro = c;

}

Passageiro::~Passageiro() {
}


void Passageiro::entraNoCarro() {
    numero = numero +1 ; //dica dada pelo professr
    int id =numero;
    Mutex.lock();   // evitar que o log fique bagun√ßado , evita que duas ou mais threads ter acesso a sc
         cout << "Thread " << id << "indo pegar ingresso." << endl;
    Mutex.unlock();

    while(true){
           turn[id] = numIngressos.fetch_add(1);  // dica dada pelo professor, identificador da thread
	// Protocolo de entrada o Algoritmo da Padaria
	// Incrementa o  de passageiros no carro (use a funcao fetch_add)
           Mutex.lock();
                  cout << "thread" << id << "\tingresso " << turn[id] << endl;   // thread pegou o ingresso
           Mutex.unlock();
           
           this_thread::sleep_for(chrono::milliseconds(rand() % 1500 + 1500));

     }
}

void Passageiro::esperaVoltaAcabar() {
	//  while (!voltaAcabou) {
    //  this_thread::sleep_for(chrono::milliseconds(rand() % 1500 + 1500));
	//}
}

void Passageiro::saiDoCarro() {
	// Protocolo de saida do Algoritmo da

	//turn[i]=numIngressos.fetch_sub;
	// Decrementa o  de passageiros no carro (use a funcao fetch_add)

}

void Passageiro::passeiaPeloParque() {
	// Dorme um tempo aleatorio
	this_thread::sleep_for(chrono::milliseconds(rand() % 1500 + 1500));
}

bool Passageiro::parqueFechado() {
	if (carro->getNVoltas() < MAX_NUM_VOLTAS)
		return false;

	else
	    return true;

}

void Passageiro::run() {
	while (!parqueFechado()) {
		entraNoCarro(); // protocolo de entrada

		esperaVoltaAcabar();

		saiDoCarro(); // protocolo de saida

		passeiaPeloParque(); // secao nao critica
	}

	// decrementa o  de pessoas no parque
}

