
#include "include/Passageiro.h"
#include "include/Carro.h"
#include "include/Parque.h"
#include <atomic>
#include <iostream>
#include <mutex>
#include <random>
#include <thread>
#define MAX_NUM_VOLTAS 2
    atomic_int turn[10];
    atomic_int number;
    int numThreads;
    mutex Mutex;
Passageiro::Passageiro(int id, Carro *c) {
	this->id = id;
	this->carro = c;

}

Passageiro::~Passageiro() {
}


void Passageiro::entraNoCarro() {
 int i = numThreads++;

    Mutex.lock();
    cout << "Thread " << i << "indo pegar ingresso." << endl;
    Mutex.unlock();
     while (1)
    {
    turn[i] = number.fetch_add(1);  // pegando ficha
	// Protocolo de entrada o Algoritmo da Padaria
	// Incrementa o numero de passageiros no carro (use a funcao fetch_add)
    Mutex.lock();
    cout << "t" << i << "\tingresso " << turn[i] << endl;   // thread pegou o ingresso

    Mutex.unlock();
    this_thread::sleep_for(chrono::milliseconds(rand() % 1500 + 1500));

     }


}

void Passageiro::esperaVoltaAcabar() {
	// while (!voltaAcabou) { delay; }
}

void Passageiro::saiDoCarro() {
	// Protocolo de saida do Algoritmo da Padaria
	// Decrementa o numero de passageiros no carro (use a funcao fetch_add)
}

void Passageiro::passeiaPeloParque() {
	// Dorme um tempo aleatorio
}

bool Passageiro::parqueFechado() {
	if (carro->getNVoltas() < MAX_NUM_VOLTAS)
		return false;

	return true;
}

void Passageiro::run() {
	while (!parqueFechado()) {
		entraNoCarro(); // protocolo de entrada

		esperaVoltaAcabar();

		saiDoCarro(); // protocolo de saida

		passeiaPeloParque(); // secao nao critica
	}

	// decrementa o numero de pessoas no parque
}

